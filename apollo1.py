import streamlit as st
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
import io

# CSV file path
csv_file_path = r"C:\Users\Pragati\OneDrive\Desktop\pro1\pred_case\ped1.csv"


# Function to generate an image with the prediction report
def generate_image(values, result, name):
    # Create an image with white background
    img = Image.new('RGB', (600, 800), color=(255, 255, 255))
    d = ImageDraw.Draw(img)

    # Load a font (you may need to specify the path to the font on your machine)
    try:
        font = ImageFont.truetype("arial.ttf", 18)
    except:
        font = ImageFont.load_default()

    # Title
    d.text((10, 10), "Apollo Hospitals", font=font, fill=(0, 0, 0))
    d.text((10, 40), "-" * 50, font=font, fill=(0, 0, 0))

    # Add patient values
    y_text = 70
    for key, value in values.items():
        d.text((10, y_text), f"{key}: {value}", font=font, fill=(0, 0, 0))
        y_text += 30

    # Add result
    d.text((10, y_text), f"Result: {result}", font=font, fill=(0, 0, 0))
    y_text += 40

    # Add date, time, and name
    now = datetime.now()
    d.text((10, y_text), f"Date: {now.strftime('%Y-%m-%d')}", font=font, fill=(0, 0, 0))
    d.text((10, y_text + 30), f"Time: {now.strftime('%H:%M:%S')}", font=font, fill=(0, 0, 0))
    d.text((10, y_text + 60), f"Report Generated by: {name}", font=font, fill=(0, 0, 0))

    # Save image to a bytes buffer
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)

    return img_buffer


# Login function
def login(username, password):
    return username == "apollo-hospital" and password == "apollo@123"


# Main app
def main():
    st.title("üåü Apollo Hospitals - Heart Disease Prediction üåü")

    # Add background color
    st.markdown("""
        <style>
        body {
            background-color: #f2f2f2;
        }
        .stTextInput {
            border-radius: 10px;
        }
        .stButton > button {
            background-color: #4CAF50;
            color: white;
            border-radius: 5px;
        }
        </style>
        """, unsafe_allow_html=True)

    # Initial login page
    if "logged_in" not in st.session_state:
        st.session_state.logged_in = False

    if not st.session_state.logged_in:
        st.subheader("üîë Login to Continue")
        username = st.text_input("Username", placeholder="Enter Username")
        password = st.text_input("Password", type="password", placeholder="Enter Password")

        if st.button("Login"):
            if login(username, password):
                st.session_state.logged_in = True
                st.success("üéâ Logged in successfully!")
            else:
                st.error("‚ùå Invalid credentials")

    # Once logged in
    if st.session_state.logged_in:
        st.subheader("üè• Enter Patient Details")

        # Input fields
        age = st.number_input("Age", min_value=1, max_value=100)
        sex = st.selectbox("Sex", ["Male", "Female"])
        cp = st.number_input("Chest Pain Type (cp)", min_value=0.0, max_value=5.0)
        trestbps = st.number_input("Resting Blood Pressure (trestbps)", min_value=94.0, max_value=200.0)
        chol = st.number_input("Serum Cholesterol (chol)", min_value=126.0, max_value=417.0)
        fbs = st.number_input("Fasting Blood Sugar (fbs)", min_value=0.0, max_value=3.0)
        restecg = st.number_input("Resting ECG (restecg)", min_value=0.0, max_value=2.0)
        thalach = st.number_input("Max Heart Rate (thalach)", min_value=71.0, max_value=192.0)
        exang = st.number_input("Exercise Induced Angina (exang)", min_value=0.0, max_value=1.0)
        oldpeak = st.number_input("ST Depression (oldpeak)", min_value=0.0, max_value=5.6)
        slope = st.number_input("Slope of Peak Exercise (slope)", min_value=0.0, max_value=2.0)
        ca = st.number_input("Major Vessels (ca)", min_value=0.0, max_value=4.0)
        thal = st.number_input("Thalassemia (thal)", min_value=1.0, max_value=3.0)

        # Load the CSV file for actual predictions
        df = pd.read_csv(csv_file_path)

        # Use input values to match and fetch predictions from the CSV
        filtered_data = df[(df['age'] == age) &
                           (df['sex'] == (1 if sex == "Male" else 0)) &
                           (df['cp'] == cp)]

        if not filtered_data.empty:
            # Get prediction values from the CSV
            extra_trees_pred = filtered_data['Extra Trees Pred Target'].values[0]
            knn_pred = filtered_data['KNN Pred Target'].values[0]
            logistic_regression_pred = filtered_data['Logistic Regression Pred Target'].values[0]

            # Calculate average prediction target
            avg_pred = (extra_trees_pred + knn_pred + logistic_regression_pred) / 3

            if st.button("Submit"):
                if avg_pred >= 0.5:
                    result = "‚ù§Ô∏è Heart disease predicted"
                    st.success(result)
                else:
                    result = "üí™ Person is healthy"
                    st.success(result)

                # Store values
                values = {
                    "Age": age,
                    "Sex": sex,
                    "Chest Pain Type (cp)": cp,
                    "Resting Blood Pressure (trestbps)": trestbps,
                    "Serum Cholesterol (chol)": chol,
                    "Fasting Blood Sugar (fbs)": fbs,
                    "Resting ECG (restecg)": restecg,
                    "Max Heart Rate (thalach)": thalach,
                    "Exercise Induced Angina (exang)": exang,
                    "ST Depression (oldpeak)": oldpeak,
                    "Slope of Peak Exercise (slope)": slope,
                    "Major Vessels (ca)": ca,
                    "Thalassemia (thal)": thal,
                    "Extra Trees Pred Target": extra_trees_pred,
                    "KNN Pred Target": knn_pred,
                    "Logistic Regression Pred Target": logistic_regression_pred,
                    "Average Prediction Target": avg_pred,
                }

                # Generate image report
                name = "xyz"
                img_buffer = generate_image(values, result, name)

                # Provide download link for the image
                st.download_button(
                    label="üì• Download Report as Image",
                    data=img_buffer,
                    file_name="heart_report.png",
                    mime="image/png",
                )
        else:
            st.warning("üö´ No matching data found in the file for the entered values.")


if __name__ == "__main__":
    main()
